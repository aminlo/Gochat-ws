// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: getusershubs.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getUsersHubs = `-- name: GetUsersHubs :many
SELECT hubs.id, name, description, active, owner_id, save_messages, hubs.created_at, hubs.updated_at, users.id, username, users.created_at, users.updated_at, email, hashed_password
FROM hubs
JOIN users ON hubs.owner_id = users.id
WHERE users.id = ?
`

type GetUsersHubsRow struct {
	ID             string
	Name           string
	Description    sql.NullString
	Active         bool
	OwnerID        string
	SaveMessages   bool
	CreatedAt      time.Time
	UpdatedAt      time.Time
	ID_2           string
	Username       string
	CreatedAt_2    time.Time
	UpdatedAt_2    time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) GetUsersHubs(ctx context.Context, id string) ([]GetUsersHubsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersHubs, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersHubsRow
	for rows.Next() {
		var i GetUsersHubsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Active,
			&i.OwnerID,
			&i.SaveMessages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Username,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Email,
			&i.HashedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
